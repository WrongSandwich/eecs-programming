TA said to fix the first character, then permutate the remaining characters
  Recursive function would just do this with each successive character

permute(char pArray[], char prefix[], int cur, int end)
{

}

for (int i = 0; i < strLength; i++)
{
  prefix[0] = str[i];
  permuter(string with that char erased, strLength one less)
}

ABC

str = ABC, prefix = "", length = 3, spot = 0
cur = 0 while cur < 3
temp = str[cur] = A
prefix.insert(0, temp) -> prefix = A
str.erase(cur, 1) -> str = BC
length = 2
std::cout << A\n
permute(BC, A, 2)

str = BC, prefix = A, length = 2, spot = 1
cur = 0 while cur < 2
temp = str[cur] = B
prefix.insert(spot, temp) -> prefix = AB
str.erase(cur,1) -> str = C
length = 1
std::cout << AB\n
permute(C, AB, 1, 2)

str = C, prefix = AB, length = 1, spot = 2
cur = 0 while cur < 1
temp = str[cur] = C
prefix.insert(spot, temp) -> prefix = ABC
st.erase(cur,1) -> str = ""
length = 0
std::cout << ABC\n
